[gd_scene load_steps=19 format=2]

[ext_resource path="res://Player/Player_Controller.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/arena.0.png" type="Texture" id=2]
[ext_resource path="res://lava.png" type="Texture" id=3]
[ext_resource path="res://Assets/bayer8tile4.png" type="Texture" id=5]
[ext_resource path="res://World.gd" type="Script" id=6]
[ext_resource path="res://Killing/arena_area.gd" type="Script" id=7]

[sub_resource type="ShaderMaterial" id=10]

[sub_resource type="Shader" id=2]
code = "/* 
This shader is under MIT license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

uniform sampler2D u_dither_tex;
uniform sampler2D u_color_tex;

uniform int u_bit_depth;
uniform float u_contrast;
uniform float u_offset;
uniform int u_dither_size;
uniform bool transparent_background;

void fragment() 
{
	// sample the screen texture at the desired output resolution (according to u_dither_size)
	// this will effectively pixelate the resulting output
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_size);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_col = texture(TEXTURE, screen_sample_uv).rgb;
	
	// calculate pixel luminosity (https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color)
	float lum = (screen_col.r * 0.299) + (screen_col.g * 0.587) + (screen_col.b * 0.114);
	
	// adjust with contrast and offset parameters
	float contrast = u_contrast;
	lum = (lum - 0.5 + u_offset) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	// reduce luminosity bit depth to give a more banded visual if desired	
	float bits = float(u_bit_depth);
	lum = floor(lum * bits) / bits;
	
	// to support multicolour palettes, we want to dither between the two colours on the palette
	// which are adjacent to the current pixel luminosity.
	// to do this, we need to determine which 'band' lum falls into, calculate the upper and lower
	// bound of that band, then later we will use the dither texture to pick either the upper or 
	// lower colour.
	
	// get the palette texture size mapped so it is 1px high (so the x value however many colour bands there are)
	ivec2 col_size = textureSize(u_color_tex, 0);
	col_size /= col_size.y;
	
	float col_x = float(col_size.x) - 1.0; // colour boundaries is 1 less than the number of colour bands
	float col_texel_size = 1.0 / col_x; // the size of one colour boundary
	
	lum = max(lum - 0.00001, 0.0); // makes sure our floor calculation below behaves when lum == 1.0
	float lum_lower = floor(lum * col_x) * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled = lum * col_x - floor(lum * col_x); // calculates where lum lies between the upper and lower bound
	
	// map the dither texture onto the screen. there are better ways of doing this that makes the dither pattern 'stick'
	// with objects in the 3D world, instead of being mapped onto the screen. see lucas pope's details posts on how he 
	// achieved this in Obra Dinn: https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742
	ivec2 noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2(1.0 / float(noise_size.x), 1.0 / float(noise_size.y));
	vec2 noise_uv = UV * inv_noise_size * vec2(float(screen_size.x), float(screen_size.y));
	float threshold = texture(u_dither_tex, noise_uv).r;
	
	// adjust the dither slightly so min and max aren't quite at 0.0 and 1.0
	// otherwise we wouldn't get fullly dark and fully light dither patterns at lum 0.0 and 1.0
	threshold = threshold * 0.99 + 0.005;
	
	// the lower lum_scaled is, the fewer pixels will be below the dither threshold, and thus will use the lower bound colour,
	// and vice-versa
	float ramp_val = lum_scaled < threshold ? 0.0f : 1.0f;
	// sample at the lower bound colour if ramp_val is 0.0, upper bound colour if 1.0
	float col_sample = mix(lum_lower, lum_upper, ramp_val);
	vec3 final_col = texture(u_color_tex, vec2(col_sample, 0.5)).rgb;
	
	// return the final colour!
	COLOR.rgb = final_col;
	
	if (COLOR.rgb == vec3(0,0,0) && transparent_background){
		COLOR.a = 0.0;
	}
}
"

[sub_resource type="Gradient" id=11]
offsets = PoolRealArray( 0, 0.453416, 0.63354, 0.850932 )
colors = PoolColorArray( 0, 0, 0, 1, 0.717647, 0.517647, 0.254902, 1, 0.239216, 0.211765, 0.109804, 1, 0.388235, 0.192157, 0.192157, 1 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=1]
shader = SubResource( 2 )
shader_param/u_bit_depth = 255
shader_param/u_contrast = 2.0
shader_param/u_offset = null
shader_param/u_dither_size = 10
shader_param/transparent_background = true
shader_param/u_dither_tex = ExtResource( 5 )
shader_param/u_color_tex = SubResource( 7 )

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform float splash_duration = 0.5;

uniform vec2 splash_size = vec2(1.2,1.2);

uniform vec4 WATER_COL : hint_color =  vec4(0.04, 0.38, 0.88, 1.0);

uniform vec4 WATER2_COL : hint_color =  vec4(0.04, 0.35, 0.78, 1.0);

uniform vec4 FOAM_COL : hint_color = vec4(0.8125, 0.9609, 0.9648, 1.0);



uniform float distortion_speed = 2.0;

uniform vec2 tile = vec2(5.0, 5.0);

uniform float wave_speed = 1.5;



const float TWOPI = 6.283185307;

const float SIXPI = 18.84955592;







float circ(vec2 pos, vec2 c, float s)

{

    c = abs(pos - c);

    c = min(c, 1.0 - c);



    return smoothstep(0.0, 0.002, sqrt(s) - sqrt(dot(c, c))) * -1.0;

}





float waterlayer(vec2 uv)

{

    uv = mod(uv, 1.0); // Clamp to [0..1]

    float ret = 1.0;

    ret += circ(uv, vec2(0.37378, 0.277169), 0.0268181);

    ret += circ(uv, vec2(0.0317477, 0.540372), 0.0193742);

    ret += circ(uv, vec2(0.430044, 0.882218), 0.0232337);

    ret += circ(uv, vec2(0.641033, 0.695106), 0.0117864);

    ret += circ(uv, vec2(0.0146398, 0.0791346), 0.0299458);

    ret += circ(uv, vec2(0.43871, 0.394445), 0.0289087);

    ret += circ(uv, vec2(0.909446, 0.878141), 0.028466);

    ret += circ(uv, vec2(0.310149, 0.686637), 0.0128496);

    ret += circ(uv, vec2(0.928617, 0.195986), 0.0152041);

    ret += circ(uv, vec2(0.0438506, 0.868153), 0.0268601);

    ret += circ(uv, vec2(0.308619, 0.194937), 0.00806102);

    ret += circ(uv, vec2(0.349922, 0.449714), 0.00928667);

    ret += circ(uv, vec2(0.0449556, 0.953415), 0.023126);

    ret += circ(uv, vec2(0.117761, 0.503309), 0.0151272);

    ret += circ(uv, vec2(0.563517, 0.244991), 0.0292322);

    ret += circ(uv, vec2(0.566936, 0.954457), 0.00981141);

    ret += circ(uv, vec2(0.0489944, 0.200931), 0.0178746);

    ret += circ(uv, vec2(0.569297, 0.624893), 0.0132408);

    ret += circ(uv, vec2(0.298347, 0.710972), 0.0114426);

    ret += circ(uv, vec2(0.878141, 0.771279), 0.00322719);

    ret += circ(uv, vec2(0.150995, 0.376221), 0.00216157);

    ret += circ(uv, vec2(0.119673, 0.541984), 0.0124621);

    ret += circ(uv, vec2(0.629598, 0.295629), 0.0198736);

    ret += circ(uv, vec2(0.334357, 0.266278), 0.0187145);

    ret += circ(uv, vec2(0.918044, 0.968163), 0.0182928);

    ret += circ(uv, vec2(0.965445, 0.505026), 0.006348);

    ret += circ(uv, vec2(0.514847, 0.865444), 0.00623523);

    ret += circ(uv, vec2(0.710575, 0.0415131), 0.00322689);

    ret += circ(uv, vec2(0.71403, 0.576945), 0.0215641);

    ret += circ(uv, vec2(0.748873, 0.413325), 0.0110795);

    ret += circ(uv, vec2(0.0623365, 0.896713), 0.0236203);

    ret += circ(uv, vec2(0.980482, 0.473849), 0.00573439);

    ret += circ(uv, vec2(0.647463, 0.654349), 0.0188713);

    ret += circ(uv, vec2(0.651406, 0.981297), 0.00710875);

    ret += circ(uv, vec2(0.428928, 0.382426), 0.0298806);

    ret += circ(uv, vec2(0.811545, 0.62568), 0.00265539);

    ret += circ(uv, vec2(0.400787, 0.74162), 0.00486609);

    ret += circ(uv, vec2(0.331283, 0.418536), 0.00598028);

    ret += circ(uv, vec2(0.894762, 0.0657997), 0.00760375);

    ret += circ(uv, vec2(0.525104, 0.572233), 0.0141796);

    ret += circ(uv, vec2(0.431526, 0.911372), 0.0213234);

    ret += circ(uv, vec2(0.658212, 0.910553), 0.000741023);

    ret += circ(uv, vec2(0.514523, 0.243263), 0.0270685);

    ret += circ(uv, vec2(0.0249494, 0.252872), 0.00876653);

    ret += circ(uv, vec2(0.502214, 0.47269), 0.0234534);

    ret += circ(uv, vec2(0.693271, 0.431469), 0.0246533);

    ret += circ(uv, vec2(0.415, 0.884418), 0.0271696);

    ret += circ(uv, vec2(0.149073, 0.41204), 0.00497198);

    ret += circ(uv, vec2(0.533816, 0.897634), 0.00650833);

    ret += circ(uv, vec2(0.0409132, 0.83406), 0.0191398);

    ret += circ(uv, vec2(0.638585, 0.646019), 0.0206129);

    ret += circ(uv, vec2(0.660342, 0.966541), 0.0053511);

    ret += circ(uv, vec2(0.513783, 0.142233), 0.00471653);

    ret += circ(uv, vec2(0.124305, 0.644263), 0.00116724);

    ret += circ(uv, vec2(0.99871, 0.583864), 0.0107329);

    ret += circ(uv, vec2(0.894879, 0.233289), 0.00667092);

    ret += circ(uv, vec2(0.246286, 0.682766), 0.00411623);

    ret += circ(uv, vec2(0.0761895, 0.16327), 0.0145935);

    ret += circ(uv, vec2(0.949386, 0.802936), 0.0100873);

    ret += circ(uv, vec2(0.480122, 0.196554), 0.0110185);

    ret += circ(uv, vec2(0.896854, 0.803707), 0.013969);

    ret += circ(uv, vec2(0.292865, 0.762973), 0.00566413);

    ret += circ(uv, vec2(0.0995585, 0.117457), 0.00869407);

    ret += circ(uv, vec2(0.377713, 0.00335442), 0.0063147);

    ret += circ(uv, vec2(0.506365, 0.531118), 0.0144016);

    ret += circ(uv, vec2(0.408806, 0.894771), 0.0243923);

    ret += circ(uv, vec2(0.143579, 0.85138), 0.00418529);

    ret += circ(uv, vec2(0.0902811, 0.181775), 0.0108896);

    ret += circ(uv, vec2(0.780695, 0.394644), 0.00475475);

    ret += circ(uv, vec2(0.298036, 0.625531), 0.00325285);

    ret += circ(uv, vec2(0.218423, 0.714537), 0.00157212);

    ret += circ(uv, vec2(0.658836, 0.159556), 0.00225897);

    ret += circ(uv, vec2(0.987324, 0.146545), 0.0288391);

    ret += circ(uv, vec2(0.222646, 0.251694), 0.00092276);

    ret += circ(uv, vec2(0.159826, 0.528063), 0.00605293);

	return max(ret, 0.0);

}



vec3 water(vec2 uv, vec3 cdir, float iTime)

{

    uv *= vec2(0.25);



    // Parallax height distortion with two directional waves at

    // slightly different angles.

    vec2 a = 0.025 * cdir.xz / cdir.y; // Parallax offset

    float h = sin(uv.x + iTime); // Height at UV

    uv += a * h;

    h = sin(0.841471 * uv.x - 0.540302 * uv.y + iTime);

    uv += a * h;

    

    // Texture distortion

    float d1 = mod(uv.x + uv.y, TWOPI);

    float d2 = mod((uv.x + uv.y + 0.25) * 1.3, SIXPI);

    d1 = iTime * 0.07 + d1;

    d2 = iTime * 0.5 + d2;

    vec2 dist = vec2(

    	sin(d1) * 0.15 + sin(d2) * 0.05,

    	cos(d1) * 0.15 + cos(d2) * 0.05

    );

    

    vec3 ret = mix(WATER_COL.rgb, WATER2_COL.rgb, waterlayer(uv + dist.xy));

    ret = mix(ret, FOAM_COL.rgb, waterlayer(vec2(1.0) - uv - dist.yx));

    return ret;

}



void fragment() {

	vec2 uv = UV;

   COLOR.rgb = vec3(water(uv * tile, vec3(0,1,0), TIME * distortion_speed));

}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/splash_duration = 0.5
shader_param/splash_size = Vector2( 1.2, 1.2 )
shader_param/WATER_COL = Color( 0.04, 0.38, 0.88, 1 )
shader_param/WATER2_COL = Color( 0.04, 0.35, 0.78, 1 )
shader_param/FOAM_COL = Color( 0.8125, 0.9609, 0.9648, 1 )
shader_param/distortion_speed = 2.0
shader_param/tile = Vector2( 20, 20 )
shader_param/wave_speed = 1.5

[sub_resource type="Shader" id=16]
code = "// Seascape shader from shadertoy converted to Godot shader
// Original https://www.shadertoy.com/view/Ms2SD1
// Converted by Johan Forsblom a.k.a SolarStrings

shader_type canvas_item;

const int NUM_STEPS = 14;
const float PI	 	= 3.141592;
const float EPSILON	= 0.001;
uniform int AA = 1;
uniform vec4 iMouse = vec4(0,0,0,1);
// sea
const int ITER_GEOMETRY = 6;
const int ITER_FRAGMENT = 9;
const float SEA_HEIGHT = 1.2;
const float SEA_CHOPPY = 6.0;
const float SEA_SPEED = 5.1;
const float SEA_FREQ = 0.10;
const vec3 SEA_BASE = vec3(0.1,0.15,0.19);
const vec3 SEA_WATER_COLOR = vec3(0.1,0.9,0.6)*0.;

const mat2 getoctave_m()
{
	vec2 vector1 = vec2(1.6,1.2);
	vec2 vector2 = vec2(-1.2,1.6);
	return mat2(vector1,vector2);	
} 

float  getSEA_TIME(float time)
{ 
	return (1.0 + time * SEA_SPEED);
}

float getEPSILON_NRM(vec2 screen_pixel_size)
{
	return 1.0 / screen_pixel_size.x;
}

// math
mat3 fromEuler(vec3 ang) {
	vec2 a1 = vec2(sin(ang.x),cos(ang.x));
    vec2 a2 = vec2(sin(ang.y),cos(ang.y));
    vec2 a3 = vec2(sin(ang.z),cos(ang.z));
    mat3 m;
    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	return m;
}
float hash( vec2 p ) {
    float h = dot(p,vec2(127.1,311.7));	
    return fract(sin(h)*43758.5453123);
}
float noise( in vec2 p ) {
    vec2 i = floor( p );
    vec2 f = fract( p );	
	vec2 u = f*f*(3.0-2.0*f);
    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), 
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ), 
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}
// lighting
float diffuse(vec3 n,vec3 l,float p) {
    return pow(dot(n,l) * 0.4 + 0.6,p);
}
float specular(vec3 n,vec3 l,vec3 e,float s) {    
    float nrm = (s + 8.0) / (PI * 8.0);
    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;
}
// sky
vec3 getSkyColor(vec3 e) {
    e.y = (max(e.y,0.0)*0.8+0.2)*0.8;
    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;
}
// sea
float sea_octave(vec2 uv, float choppy) {
    uv += noise(uv);        
    vec2 wv = 1.0-abs(sin(uv));
    vec2 swv = abs(cos(uv));    
    wv = mix(wv,swv,wv);
    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);
}
float map(vec3 p,float time) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_GEOMETRY; i++) {        
    	d = sea_octave((uv+getSEA_TIME(time))*freq,choppy);
    	d += sea_octave((uv-getSEA_TIME(time))*freq,choppy);
        h += d * amp;        
    	uv *= getoctave_m(); freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}

float map_detailed(vec3 p,float time) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_FRAGMENT; i++) {        
    	d = sea_octave((uv+getSEA_TIME(time))*freq,choppy);
    	d += sea_octave((uv-getSEA_TIME(time))*freq,choppy);
        h += d * amp;        
    	uv *= getoctave_m(); freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}
vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  
    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);
    fresnel = pow(fresnel,3.0) * 0.5;
        
    vec3 reflected = getSkyColor(reflect(eye,n));    
    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; 
    
    vec3 color = mix(refracted,reflected,fresnel);
    
    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;
    
    color += vec3(specular(n,l,eye,60.0));
    
    return color;
}
// tracing
vec3 getNormal(vec3 p, float eps,float time) {
    vec3 n;
    n.y = map_detailed(p,time);    
    n.x = map_detailed(vec3(p.x+eps,p.y,p.z),time) - n.y;
    n.z = map_detailed(vec3(p.x,p.y,p.z+eps),time) - n.y;
    n.y = eps;
    return normalize(n);
}

float heightMapTracing(vec3 ori, vec3 dir, out vec3 p, float time) {  
    float tm = 0.0;
    float tx = 1000.0;    
    float hx = map(ori + dir * tx,time);
    if(hx > 0.0) {
        p = ori + dir * tx;
        return tx;   
    }
    float hm = map(ori + dir * tm,time);    
    float tmid = 0.0;
    for(int i = 0; i < NUM_STEPS; i++) {
        tmid = mix(tm,tx, hm/(hm-hx));                   
        p = ori + dir * tmid;                   
    	float hmid = map(p,time);
		if(hmid < 0.0) {
        	tx = tmid;
            hx = hmid;
        } else {
            tm = tmid;
            hm = hmid;
        }
    }
    return tmid;
}
vec3 getPixel(vec2 coord, float time, vec2 iResolution ) {    
    vec2 uv = coord / iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;    
        
    // ray
    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    
    vec3 ori = vec3(0.0,3.5,time*5.0);
    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.14;
    dir = normalize(dir) * fromEuler(ang);
    
    // tracing
    vec3 p;
    heightMapTracing(ori,dir,p,time);
    vec3 dist = p - ori;
    vec3 n = getNormal(p, dot(dist,dist) * getEPSILON_NRM(iResolution),time);
    vec3 light = normalize(vec3(0.0,1.0,0.8)); 
             
    // color
    return mix(
        getSkyColor(dir),
        getSeaColor(p,n,light,dir,dist),
        pow(smoothstep(0.0,-0.02,dir.y),0.2));
}

// main
void fragment() 
{
    float time = TIME * 0.02  + iMouse.x*0.04;
	vec2 iResolution = 1.0 / SCREEN_PIXEL_SIZE;
	vec3 color = vec3(0,0,0);
	if(AA == 1){
	    for(float i = -1.0; i <= 1.0; i++) {
	        for(float j = -1.0; j <= 1.0; j++) {
	            vec2 uv = FRAGCOORD.xy+vec2(i,j)/3.0;
	    	    color += getPixel(uv, time,iResolution);
	        }
	    }
            color /= 9.0;		
	}
	// Anti aliasing off
	if(AA == 0){
           color = getPixel(FRAGCOORD.xy,time,iResolution);
	}
    
    // post
    COLOR = vec4(pow(color,vec3(0.65)), 1.0);
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/AA = 0
shader_param/iMouse = Plane( 0, 1, 1, 1 )

[sub_resource type="Environment" id=15]
background_mode = 4
background_energy = 1.85
ambient_light_color = Color( 0.945098, 0.658824, 0.658824, 1 )
ambient_light_energy = 1.14
glow_enabled = true
glow_bloom = 0.1
glow_blend_mode = 1

[sub_resource type="Gradient" id=18]
offsets = PoolRealArray( 0 )
colors = PoolColorArray( 0.607843, 0.34902, 0.713726, 1 )

[sub_resource type="GradientTexture" id=19]
gradient = SubResource( 18 )

[node name="World" type="Node2D"]
material = SubResource( 10 )
script = ExtResource( 6 )

[node name="arena_area" type="Area2D" parent="."]
position = Vector2( -170.444, 99 )
scale = Vector2( 1.277, 1.277 )
script = ExtResource( 7 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="arena_area"]
modulate = Color( 1, 1, 1, 0 )
polygon = PoolVector2Array( -319, -160, 19, -355, 449, -407, 887, -338, 1196, -114, 1094, 209, 416, 383, -279, 195 )

[node name="Arena" type="Sprite" parent="."]
modulate = Color( 0.635294, 0.521569, 0.521569, 1 )
material = SubResource( 1 )
use_parent_material = true
position = Vector2( 440.778, 140.5 )
scale = Vector2( 1.27685, 1.27685 )
z_index = -1
z_as_relative = false
texture = ExtResource( 2 )

[node name="Lava" type="Sprite" parent="."]
material = SubResource( 14 )
position = Vector2( 405.5, 125 )
scale = Vector2( 4.62625, 3.44 )
z_index = -2
z_as_relative = false
texture = ExtResource( 3 )

[node name="ColorRect" type="ColorRect" parent="Lava"]
material = SubResource( 17 )
use_parent_material = true
margin_left = -399.0
margin_top = -302.0
margin_right = 418.0
margin_bottom = 305.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 1, 0.905882, 0.85098, 1 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 15 )

[node name="player_spawn" type="Position2D" parent="."]
position = Vector2( 331, -297 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 454, 162 )
current = true
zoom = Vector2( 3, 3 )

[node name="BackDrop" type="Sprite" parent="."]
visible = false
position = Vector2( 451, 132.5 )
scale = Vector2( 1.85059, 2085 )
z_index = -1
texture = SubResource( 19 )

[node name="Player_Controller" parent="." instance=ExtResource( 1 )]
position = Vector2( 351, 40 )

[connection signal="body_entered" from="arena_area" to="arena_area" method="_on_arena_area_body_entered"]
[connection signal="body_exited" from="arena_area" to="arena_area" method="_on_arena_area_body_exited"]
