[gd_scene load_steps=15 format=2]

[ext_resource path="res://Assets/_MISC/bayer8tile4.png" type="Texture" id=1]
[ext_resource path="res://Assets/Player/rat.png" type="Texture" id=2]
[ext_resource path="res://Scripts/Player/Player_Controller.gd" type="Script" id=3]
[ext_resource path="res://Scripts/Managers/UImanager.gd" type="Script" id=4]

[sub_resource type="CapsuleShape2D" id=16]
radius = 23.5
height = 39.0

[sub_resource type="Shader" id=6]
code = "/* 
This shader is under MIT license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

uniform sampler2D u_dither_tex;
uniform sampler2D u_color_tex;

uniform int u_bit_depth;
uniform float u_contrast;
uniform float u_offset;
uniform int u_dither_size;
uniform bool transparent_background;

void fragment() 
{
	// sample the screen texture at the desired output resolution (according to u_dither_size)
	// this will effectively pixelate the resulting output
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_size);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_col = texture(TEXTURE, screen_sample_uv).rgb;
	
	// calculate pixel luminosity (https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color)
	float lum = (screen_col.r * 0.299) + (screen_col.g * 0.587) + (screen_col.b * 0.114);
	
	// adjust with contrast and offset parameters
	float contrast = u_contrast;
	lum = (lum - 0.5 + u_offset) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	// reduce luminosity bit depth to give a more banded visual if desired	
	float bits = float(u_bit_depth);
	lum = floor(lum * bits) / bits;
	
	// to support multicolour palettes, we want to dither between the two colours on the palette
	// which are adjacent to the current pixel luminosity.
	// to do this, we need to determine which 'band' lum falls into, calculate the upper and lower
	// bound of that band, then later we will use the dither texture to pick either the upper or 
	// lower colour.
	
	// get the palette texture size mapped so it is 1px high (so the x value however many colour bands there are)
	
	ivec2 col_size = textureSize(u_color_tex, 0);
	col_size /= col_size.y;
	
	float col_x = float(col_size.x) - 1.0; // colour boundaries is 1 less than the number of colour bands
	float col_texel_size = 1.0 / col_x; // the size of one colour boundary
	
	lum = max(lum - 0.00001, 0.0); // makes sure our floor calculation below behaves when lum == 1.0
	float lum_lower = floor(lum * col_x) * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled = lum * col_x - floor(lum * col_x); // calculates where lum lies between the upper and lower bound
	
	// map the dither texture onto the screen. there are better ways of doing this that makes the dither pattern 'stick'
	// with objects in the 3D world, instead of being mapped onto the screen. see lucas pope's details posts on how he 
	// achieved this in Obra Dinn: https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742
	ivec2 noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2(1.0 / float(noise_size.x), 1.0 / float(noise_size.y));
	vec2 noise_uv = UV * inv_noise_size * vec2(float(screen_size.x), float(screen_size.y));
	float threshold = texture(u_dither_tex, noise_uv).r;
	
	// adjust the dither slightly so min and max aren't quite at 0.0 and 1.0
	// otherwise we wouldn't get fullly dark and fully light dither patterns at lum 0.0 and 1.0
	threshold = threshold * 0.99 + 0.005;
	
	// the lower lum_scaled is, the fewer pixels will be below the dither threshold, and thus will use the lower bound colour,
	// and vice-versa
	float ramp_val = lum_scaled < threshold ? 0.0f : 1.0f;
	// sample at the lower bound colour if ramp_val is 0.0, upper bound colour if 1.0
	float col_sample = mix(lum_lower, lum_upper, ramp_val);
	vec3 final_col = texture(u_color_tex, vec2(col_sample, 0.5)).rgb;
	
	// return the final colour!
	COLOR.rgb = final_col;
	
	if (COLOR.rgb == vec3(0,0,0) && transparent_background){
		COLOR.a = 0.0;
	}
}
"

[sub_resource type="Gradient" id=7]
offsets = PoolRealArray( 0, 2.19051e-13, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.470588, 0.894118, 0.337255, 1, 0.368627, 0.537255, 0.235294, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 6 )
shader_param/u_bit_depth = 32
shader_param/u_contrast = 2.0
shader_param/u_offset = null
shader_param/u_dither_size = 5
shader_param/transparent_background = true
shader_param/u_dither_tex = ExtResource( 1 )
shader_param/u_color_tex = SubResource( 8 )

[sub_resource type="Animation" id=11]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Bars/Swing:custom_styles/fg:bg_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 0.415686, 0.415686, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Sprite:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../HitBox/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="Animation" id=12]
resource_name = "cooldown_pulse"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Bars/Swing:custom_styles/fg:bg_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 0.415686, 0.415686, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 0.415686, 0.415686, 1 ) ]
}

[sub_resource type="Animation" id=14]
resource_name = "damage"
length = 0.3
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("Bars/Swing:rect_rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, -10.0, 10.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Sprite:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.14, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 0.964706, 0.494118, 0.494118, 1 ), Color( 1, 1, 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../HitBox/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.14, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Bars/Swing:custom_styles/fg:bg_color")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.14, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 0.443137, 0.443137, 1 ), Color( 0.384314, 0.733333, 0.192157, 1 ), Color( 1, 1, 1, 1 ), Color( 0.384314, 0.733333, 0.192157, 1 ), Color( 1, 0.439216, 0.439216, 1 ) ]
}

[sub_resource type="StyleBoxFlat" id=10]
bg_color = Color( 1, 0.415686, 0.415686, 1 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 0.8, 0.8, 0.8, 0 )
corner_radius_top_left = 3
corner_radius_top_right = 3
corner_radius_bottom_right = 3
corner_radius_bottom_left = 3

[sub_resource type="CapsuleShape2D" id=15]
radius = 15.0
height = 38.0

[node name="Player_Controller" type="KinematicBody2D" groups=["Persist", "Player"]]
script = ExtResource( 3 )
split = 0
bleed = 0
bleed_rate = 2.0
crit_chance = 5.0
crit_mult = 1.5

[node name="Tween" type="Tween" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( -1.5, -6 )
shape = SubResource( 16 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 5 )
use_parent_material = true
position = Vector2( 0, 4.76837e-07 )
scale = Vector2( 0.428571, 0.428571 )
texture = ExtResource( 2 )
offset = Vector2( 2.33334, -11.6667 )

[node name="Camera2D" type="Camera2D" parent="."]
drag_margin_h_enabled = true
drag_margin_v_enabled = true

[node name="rot" type="Node2D" parent="."]

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="UI" type="Control" parent="."]
rect_scale = Vector2( 1.5, 1.5 )
mouse_filter = 1
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="UI"]
anims/RESET = SubResource( 11 )
anims/cooldown_pulse = SubResource( 12 )
anims/damage = SubResource( 14 )

[node name="Bars" type="VBoxContainer" parent="UI"]
anchor_bottom = 0.468
margin_left = -36.0
margin_top = -79.3333
margin_right = -0.999969
margin_bottom = -58.3333
rect_scale = Vector2( 2, 2 )
size_flags_horizontal = 3
size_flags_vertical = 3
alignment = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Swing" type="ProgressBar" parent="UI/Bars"]
margin_top = 14.0
margin_right = 35.0
margin_bottom = 22.0
rect_min_size = Vector2( 0, 7 )
mouse_filter = 1
custom_styles/fg = SubResource( 10 )
max_value = 200.0
value = 100.0
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HitBox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitBox"]
position = Vector2( -1, -3 )
rotation = -0.0872665
shape = SubResource( 15 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="body_entered" from="HitBox" to="." method="_on_HitBox_body_entered"]
